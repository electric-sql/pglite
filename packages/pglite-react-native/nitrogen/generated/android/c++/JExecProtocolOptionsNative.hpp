///
/// JExecProtocolOptionsNative.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ExecProtocolOptionsNative.hpp"

#include <optional>

namespace margelo::nitro::electricsql::pglite {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "ExecProtocolOptionsNative" and the the Kotlin data class "ExecProtocolOptionsNative".
   */
  struct JExecProtocolOptionsNative final: public jni::JavaClass<JExecProtocolOptionsNative> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/com/electricsql/pglite/ExecProtocolOptionsNative;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct ExecProtocolOptionsNative by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ExecProtocolOptionsNative toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldSyncToFs = clazz->getField<jni::JBoolean>("syncToFs");
      jni::local_ref<jni::JBoolean> syncToFs = this->getFieldValue(fieldSyncToFs);
      return ExecProtocolOptionsNative(
        syncToFs != nullptr ? std::make_optional(static_cast<bool>(syncToFs->value())) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JExecProtocolOptionsNative::javaobject> fromCpp(const ExecProtocolOptionsNative& value) {
      return newInstance(
        value.syncToFs.has_value() ? jni::JBoolean::valueOf(value.syncToFs.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::electricsql::pglite
