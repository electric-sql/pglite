///
/// HybridPGLiteNativeSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridPGLiteNativeSpec.hpp"

// Forward declaration of `HybridPGLiteNativeSpec_cxx` to properly resolve imports.
namespace PGLiteReactNative { class HybridPGLiteNativeSpec_cxx; }

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `ExecProtocolOptionsNative` to properly resolve imports.
namespace margelo::nitro::electricsql::pglite { struct ExecProtocolOptionsNative; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/Promise.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include "ExecProtocolOptionsNative.hpp"
#include <optional>

#include "PGLiteReactNative-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::electricsql::pglite {

  /**
   * The C++ part of HybridPGLiteNativeSpec_cxx.swift.
   *
   * HybridPGLiteNativeSpecSwift (C++) accesses HybridPGLiteNativeSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridPGLiteNativeSpec_cxx can directly inherit from the C++ class HybridPGLiteNativeSpec
   * to simplify the whole structure and memory management.
   */
  class HybridPGLiteNativeSpecSwift: public virtual HybridPGLiteNativeSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridPGLiteNativeSpecSwift(const PGLiteReactNative::HybridPGLiteNativeSpec_cxx& swiftPart):
      HybridObject(HybridPGLiteNativeSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline PGLiteReactNative::HybridPGLiteNativeSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::shared_ptr<ArrayBuffer>>> execProtocolRaw(const std::shared_ptr<ArrayBuffer>& message, const std::optional<ExecProtocolOptionsNative>& options) override {
      auto __result = _swiftPart.execProtocolRaw(ArrayBufferHolder(message), options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> close() override {
      auto __result = _swiftPart.close();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    PGLiteReactNative::HybridPGLiteNativeSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::electricsql::pglite
