///
/// HybridPGLiteReactNativeSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridPGLiteReactNativeSpec``
public protocol HybridPGLiteReactNativeSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func execProtocolRaw(message: ArrayBuffer, options: ExecProtocolOptionsNative?) throws -> Promise<ArrayBuffer>
  func close() throws -> Promise<Void>
}

/// See ``HybridPGLiteReactNativeSpec``
open class HybridPGLiteReactNativeSpec_base {
  private weak var cxxWrapper: HybridPGLiteReactNativeSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridPGLiteReactNativeSpec_cxx {
  #if DEBUG
    guard self is HybridPGLiteReactNativeSpec else {
      fatalError("`self` is not a `HybridPGLiteReactNativeSpec`! Did you accidentally inherit from `HybridPGLiteReactNativeSpec_base` instead of `HybridPGLiteReactNativeSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridPGLiteReactNativeSpec_cxx(self as! HybridPGLiteReactNativeSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the PGLiteReactNative HybridObject.
 * Implement this protocol to create Swift-based instances of PGLiteReactNative.
 * ```swift
 * class HybridPGLiteReactNative : HybridPGLiteReactNativeSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridPGLiteReactNativeSpec = HybridPGLiteReactNativeSpec_protocol & HybridPGLiteReactNativeSpec_base
