--- postgresql-16.3/src/backend/libpq/pqcomm.c
+++ postgresql-16.3-wasm/src/backend/libpq/pqcomm.c
@@ -123,8 +123,12 @@
 static int	PqSendBufferSize;	/* Size send buffer */
 static int	PqSendPointer;		/* Next index to store a byte in PqSendBuffer */
 static int	PqSendStart;		/* Next index to send a byte in PqSendBuffer */
-
+#if defined(__EMSCRIPTEN__) || defined(__wasi__)
+static char PqRecvBuffer_static[PQ_RECV_BUFFER_SIZE];
+static char *PqRecvBuffer;
+#else
 static char PqRecvBuffer[PQ_RECV_BUFFER_SIZE];
+#endif
 static int	PqRecvPointer;		/* Next index to read a byte from PqRecvBuffer */
 static int	PqRecvLength;		/* End of data available in PqRecvBuffer */
 
@@ -136,6 +140,7 @@
 
 
 /* Internal functions */
+
 static void socket_comm_reset(void);
 static void socket_close(int code, Datum arg);
 static void socket_set_nonblocking(bool nonblocking);
@@ -146,11 +151,44 @@
 static void socket_putmessage_noblock(char msgtype, const char *s, size_t len);
 static int	internal_putbytes(const char *s, size_t len);
 static int	internal_flush(void);
+#if 0
+static void wasm_comm_reset() {
+    puts(" ******************************** wasm_comm_reset");
+}
 
-static int	Lock_AF_UNIX(const char *unixSocketDir, const char *unixSocketPath);
-static int	Setup_AF_UNIX(const char *sock_path);
+static int wasm_flush() {
+    puts(" ******************************** wasm_flush");
+    return 0;
+}
+
+static int wasm_flush_if_writable() {
+    puts(" ******************************** wasm_flush_if_writable");
+    return 0;
+}
+
+static int wasm_putmessage(char msgtype, const char *s, size_t len) {
+    puts(" ******************************** wasm_putmessage");
+    return 0;
+}
+
+static bool wasm_is_send_pending(void) {
+    puts(" ******************************** wasm_is_send_pending");
+    return false;
+}
+static void wasm_putmessage_noblock(char msgtype, const char *s, size_t len) {
+    puts(" ******************************** wasm_putmessage_noblock");
+}
 
 static const PQcommMethods PqCommSocketMethods = {
+	wasm_comm_reset,
+	wasm_flush,
+	wasm_flush_if_writable,
+	wasm_is_send_pending,
+	wasm_putmessage,
+    wasm_putmessage_noblock
+};
+#else
+static const PQcommMethods PqCommSocketMethods = {
 	socket_comm_reset,
 	socket_flush,
 	socket_flush_if_writable,
@@ -158,6 +196,10 @@
 	socket_putmessage,
 	socket_putmessage_noblock
 };
+#endif
+static int	Lock_AF_UNIX(const char *unixSocketDir, const char *unixSocketPath);
+static int	Setup_AF_UNIX(const char *sock_path);
+
 
 const PQcommMethods *PqCommMethods = &PqCommSocketMethods;
 
@@ -180,7 +222,7 @@
 	PqSendPointer = PqSendStart = PqRecvPointer = PqRecvLength = 0;
 	PqCommBusy = false;
 	PqCommReadingMsg = false;
-
+#if !defined(__EMSCRIPTEN__) && !defined(__wasi__)
 	/* set up process-exit hook to close the socket */
 	on_proc_exit(socket_close, 0);
 
@@ -210,7 +252,9 @@
 								  MyLatch, NULL);
 	AddWaitEventToSet(FeBeWaitSet, WL_POSTMASTER_DEATH, PGINVALID_SOCKET,
 					  NULL, NULL);
-
+#else
+    #pragma message "FIXME: socketfile"
+#endif
 	/*
 	 * The event positions match the order we added them, but let's sanity
 	 * check them to be sure.
@@ -1148,6 +1192,16 @@
  *		This must be called before any of the pq_get* functions.
  * --------------------------------
  */
+#if defined(I_EMSCRIPTEN)
+EMSCRIPTEN_KEEPALIVE void
+pq_recvbuf_fill(FILE* fp, int packetlen) {
+    fread( PqRecvBuffer, packetlen, 1, fp);
+    PqRecvPointer = 0;
+    PqRecvLength = packetlen;
+}
+#endif
+extern int cma_rsize;
+static char * PqSendBuffer_save;
 void
 pq_startmsgread(void)
 {
@@ -1159,7 +1213,24 @@
 		ereport(FATAL,
 				(errcode(ERRCODE_PROTOCOL_VIOLATION),
 				 errmsg("terminating connection because protocol synchronization was lost")));
-
+#if defined(I_EMSCRIPTEN)
+    if (cma_rsize) {
+        PqRecvPointer = 0;
+        PqRecvLength = cma_rsize;
+        PqRecvBuffer = (char*)0x1;
+
+        PqSendPointer = 0;
+        PqSendBuffer_save = PqSendBuffer;
+        PqSendBuffer = 2 + (char*)(cma_rsize);
+        PqSendBufferSize = (64*1024*1024) - (int)(&PqSendBuffer[0]);
+        printf("# 1214 pq_startmsgread cma_rsize=%d buf=%p reply=%p\n", cma_rsize, &PqRecvBuffer[0], &PqSendBuffer[0]);
+    } else {
+        PqRecvBuffer = &PqRecvBuffer_static[0];
+        if (PqSendBuffer_save)
+            PqSendBuffer=PqSendBuffer_save;
+        PqSendBufferSize = PQ_SEND_BUFFER_SIZE;
+    }
+#endif
 	PqCommReadingMsg = true;
 }
 
@@ -1282,9 +1353,62 @@
 
 	return 0;
 }
+#if defined(__EMSCRIPTEN__) || defined(__wasm__)
+
+extern FILE* SOCKET_FILE;
+extern int SOCKET_DATA;
+
+static int
+internal_putbytes(const char *s, size_t len) {
+	if (PqSendPointer >= PqSendBufferSize)
+	{
+        puts("# 1336: overflow");
+    }
+
+    if (!cma_rsize) {
+        int wc=      fwrite(s, 1, len, SOCKET_FILE);
+        fprintf(stderr,"# sockfile %d +%d top=%p %d/%d\n", SOCKET_DATA, wc, PqSendBuffer, PqSendPointer,PqSendBufferSize);
+        SOCKET_DATA+=wc;
+    } else {
+	    size_t		amount;
+	    while (len > 0)
+	    {
+		    /* If buffer is full, then flush it out */
+		    if (PqSendPointer >= PqSendBufferSize)
+		    {
+			    socket_set_nonblocking(false);
+			    if (internal_flush())
+				    return EOF;
+		    }
+		    amount = PqSendBufferSize - PqSendPointer;
+		    if (amount > len)
+			    amount = len;
+		    memcpy(PqSendBuffer + PqSendPointer, s, amount);
+		    PqSendPointer += amount;
+		    s += amount;
+		    len -= amount;
+            SOCKET_DATA+=amount;
+	    }
+//        fprintf(stderr,"# raw wire: %d +%zu top=%p %d/%d\n", SOCKET_DATA, amount, PqSendBuffer, PqSendPointer,PqSendBufferSize);
+    }
+    return 0;
+}
 
+static int
+socket_flush(void) {
+    return internal_flush();
+}
 
 static int
+internal_flush(void) {
+    /*  no flush for raw wire */
+    if (!cma_rsize) {
+    	PqSendStart = PqSendPointer = 0;
+    }
+	return 0;
+}
+#else
+static int
 internal_putbytes(const char *s, size_t len)
 {
 	size_t		amount;
@@ -1403,7 +1527,7 @@
 	PqSendStart = PqSendPointer = 0;
 	return 0;
 }
-
+#endif
 /* --------------------------------
  *		pq_flush_if_writable - flush pending output if writable without blocking
  *
