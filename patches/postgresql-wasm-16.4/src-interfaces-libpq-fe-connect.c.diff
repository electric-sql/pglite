--- postgresql/src/interfaces/libpq/fe-connect.c
+++ postgresql-wasm/src/interfaces/libpq/fe-connect.c
@@ -1932,6 +1932,7 @@
 static int
 connectNoDelay(PGconn *conn)
 {
+#if !defined(__EMSCRIPTEN__)
 #ifdef	TCP_NODELAY
 	int			on = 1;
 
@@ -1946,7 +1947,7 @@
 		return 0;
 	}
 #endif
-
+#endif
 	return 1;
 }
 
@@ -2067,6 +2068,9 @@
 static int
 useKeepalives(PGconn *conn)
 {
+#if defined(__EMSCRIPTEN__)
+return 0;
+#else
 	char	   *ep;
 	int			val;
 
@@ -2076,6 +2080,7 @@
 	if (*ep)
 		return -1;
 	return val != 0 ? 1 : 0;
+#endif
 }
 
 /*
@@ -2348,13 +2353,14 @@
 	 * Nobody but developers should see this message, so we don't bother
 	 * translating it.
 	 */
+#if !defined(__EMSCRIPTEN__)
 	if (!pg_link_canary_is_frontend())
 	{
 		appendPQExpBufferStr(&conn->errorMessage,
 							 "libpq is incorrectly linked to backend functions\n");
 		goto connect_errReturn;
 	}
-
+#endif
 	/* Ensure our buffers are empty */
 	conn->inStart = conn->inCursor = conn->inEnd = 0;
 	conn->outCount = 0;
@@ -2420,6 +2426,7 @@
 	 */
 	if (conn->connect_timeout != NULL)
 	{
+puts("# timeout set !");
 		if (!parse_int_param(conn->connect_timeout, &timeout, conn,
 							 "connect_timeout"))
 		{
@@ -2440,7 +2447,9 @@
 		}
 		else					/* negative means 0 */
 			timeout = 0;
-	}
+	} else {
+puts("# no timeout"); flag = PGRES_POLLING_OK;
+}
 
 	for (;;)
 	{
@@ -2498,6 +2507,7 @@
 
 		if (ret == 1)			/* connect_timeout elapsed */
 		{
+puts("# timeout !");
 			/*
 			 * Give up on current server/address, try the next one.
 			 */
